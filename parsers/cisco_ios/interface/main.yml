- name: interface
  tags:
  - interface
  matches:
  - name: interface
    template: interface/default.j2
    lines:
    - regex: '^interface (\S+)$'
      exmaples:
      - 'interface GigabitEthernet0/6'
      captures:
      - name
      path:
        interfaces:
          "{{ name }}":
            name: "{{ name }}"
      lines:
      - regex: '^ description (.*)$'
        exmaples:
        - 'description My interface description'
        captures:
        - description
        path:
          interfaces:
            "{{ name }}":
              description: "\"{{ description }}\""
      - regex: '^ vrf forwarding (\S+)$'
        examples:
        - ' vrf forwarding blue'
        - ' vrf forwarding 1:1000'
        captures:
        - vrf
        path:
          interfaces:
            "{{ name }}":
              vrf: "\"{{ vrf }}\""
      - regex: '^ encapsulation (\S+) (\d+)'
        examples:
        - ' encapsulation dot1Q 61'
        captures:
        - encapsulation_protocol
        - encapsulation_tag
        path:
          interfaces:
            "{{ name }}":
              encapsulation:
                protocol: "{{ encapsulation_protocol }}"
                tag: "{{ encapsulation_tag }}"
      - regex: '^ switchport access vlan (\d{1,4})$'
        examples:
        - ' switchport access vlan 900'
        captures:
        - vlan
        path:
          interfaces:
            "{{ name }}":
              switchport:
                access:
                  vlan: "{{ vlan }}"
      - regex: '^ switchport trunk encapsulation (\w+)$'
        exmaples:
        - ' switchport trunk encapsulation dot1q'
        captures:
        - switchport_trunk_encapsulation
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  encapsulation: "{{ switchport_trunk_encapsulation }}"
      - regex: '^ switchport trunk native vlan (\d{1,4})$'
        exmaples:
        - ' switchport trunk native vlan 5'
        captures:
        - vlan
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  native_vlan: "{{ vlan }}"
      - regex: '^ switchport trunk allowed vlan (?!(add))(.*)$'
        exmaples:
        - 'switchport trunk allowed vlan 1,2,903-905'
        captures:
        - not add
        - vlans
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  allowed_vlans:
                    vlans: "\"{{ vlans }}\""
      - regex: '^ switchport trunk allowed vlan add (.*)$'
        exmaples:
        - ' switchport trunk allowed vlan add 1002-1005'
        captures:
        - vlans
        path:
          interfaces:
            "{{ name }}":
              switchport:
                trunk:
                  allowed_vlans:
                    add: "\"{{ vlans }}\""
      - regex: '^ switchport mode (.*)$'
        examples:
        - ' switchport mode trunk'
        captures:
        - mode
        path:
          interfaces:
            "{{ name }}":
              switchport:
                mode: "{{ mode.split() }}"
      - regex: '^ channel-group (\d{1,3}) mode (.*)$'
        examples:
        - ' channel-group 1 mode desirable'
        captures:
        - channel_group
        - channel_group_mode
        path:
          interfaces:
            "{{ name }}":
              channel_group: "{{ channel_group }}"
              channel_group_mode: "{{ channel_group_mode.split() }}"
      - regex: '^ no switchport$'
        exmaples:
        - ' no switchport'
        path:
          interfaces:
            "{{ name }}":
              switchport:
                negate: True
      - regex: '^ bandwidth (.*)$'
        examples:
        - ' bandwidth 10000'
        captures:
        - bandwidth
        path:
          interfaces:
            "{{ name }}":
              bandwidth: "{{ bandwidth }}"
      - regex: '^ ip address (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}) (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        - ' ip address 10.250.100.1 255.255.255.0'
        captures:
        - ipv4_address
        - ipv4_netmask
        path:
          interfaces:
            "{{ name }}":
              ip:
                address:
                  ipv4_address: "{{ ipv4_address }}"
                  ipv4_netmask: "{{ ipv4_netmask }}"
      - regex: '^ no ip address$'
        examples:
        - ' no ip address'
        path:
          interfaces:
            "{{ name }}":
              ip:
                address:
                  negate: True
      - regex: '^ ip helper-address (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$'
        examples:
        - ' ip helper-address 10.1.1.90'
        captures:
        - ipv4_helper_address
        path:
          interfaces:
            "{{ name }}":
              ip:
                helper_addresses:
                - ipv4_helper_address: "{{ ipv4_helper_address }}"
      - regex: '^ ip route-cache (\w+)$'
        examples:
        - ' ip route-cache policy'
        captures:
        - route_cache
        path:
          interfaces:
            "{{ name }}":
              ip:
                route_cache: "{{ route_cache }}"
      - regex: '^ ip policy route-map (\S+)$'
        examples:
        - ' ip policy route-map foo-test'
        captures:
        - policy_route_map
        path:
          interfaces:
            "{{ name }}":
              ip:
                policy_route_map: "{{ policy_route_map }}"
      - regex: '^ shutdown$'
        examples:
        - ' shutdown'
        path:
          interfaces:
            "{{ name }}":
              shutdown: True
      - regex: '^ no platform qos channel-consistency$'
        examples:
        - ' no platform qos channel-consistency'
        path:
          interfaces:
            "{{ name }}":
              platform_qos_channel-consistency:
                negate: True
      - regex: '^ switch virtual link (\d+)$'
        examples:
        - ' switch virtual link 1'
        captures:
        - switch_virtual_link
        path:
          interfaces:
            "{{ name }}":
              virtual_link: "{{ switch_virtual_link }}"